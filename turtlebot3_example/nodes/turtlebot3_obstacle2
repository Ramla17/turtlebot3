#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

# Det her er den Ramla har lavet

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

LINEAR_VEL = 0.19
STOP_DISTANCE = 0.05
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()
    
    def halt_movement(self):
        # Stop the robot's movement by setting linear and angular velocities to zero
        twist = Twist()
        twist.linear.x = 0.0
        twist.angular.z = 0.0
        self._cmd_pub.publish(twist)
        rospy.loginfo('Robot movement halted.')
        
    def calculate_turn_angle(self, min_distance):
    # Example logic to calculate turn angle based on distance to the obstacle
        if min_distance < 0.5:
        # If obstacle is very close, turn sharply to avoid it
            turn_angle = 45  # Turn away from the obstacle by 45 degrees
        elif min_distance > 0.5 and min_distance < 1.0:
        # If obstacle is moderately close, turn moderately to avoid it
            turn_angle = 30  # Turn away from the obstacle by 30 degrees
        else:
        # If obstacle is farther away, turn slightly to avoid it
            turn_angle = 15  # Turn away from the obstacle by 15 degrees
        return turn_angle


    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 90            # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter

    # Dette er duplikeret??
    # def obstacle(self):
    #     twist = Twist()
    #     turtlebot_moving = True

    #     while not rospy.is_shutdown():
            
    #         user_input = input()
    #         # Check if the user input matches the desired command
    #         if user_input.lower() == 'x':
    #             self.halt_movement()
    #             continue  # Skip the rest of the loop iteration if command was executed
            

    #         lidar_distances = self.get_scan()
    #         min_distance = min(lidar_distances)
    #         print(min_distance)

    #         if min_distance < SAFE_STOP_DISTANCE:
    #             if turtlebot_moving:
    #                 twist.linear.x = 0.0
    #                 twist.angular.z = math.radians(self._Remaining_angle)  # It converts angle to radians
    #                 self._cmd_pub.publish(twist)
    #                 turtlebot_moving = False
    #                 rospy.loginfo('Stop!')
    #         else:
    #             # This line calculates new turn angle to avoid the obstacle
    #             new_angle = self.calculate_turn_angle(min_distance)
    #             twist.linear.x = LINEAR_VEL
    #             twist.angular.z = 0.0
    #             self._cmd_pub.publish(twist)
    #              # It updates Remaining_angle
    #             self._Remaining_angle = new_angle
    #             turtlebot_moving = True
    #             rospy.loginfo('Distance of the obstacle : %f', min_distance)

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True

        while not rospy.is_shutdown():
            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)
            print(min_distance)

            if min_distance < SAFE_STOP_DISTANCE:
                if turtlebot_moving:
                    # The robot stops
                    twist.linear.x = 0.0
                    twist.angular.z = 0.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = False
                    rospy.loginfo('Stop!')

                # The robot determins whether to turn left or right
                if lidar_distances.index(min_distance) < len(lidar_distances) / 2:
                    # It turns right
                    twist.angular.z = -0.5  # Vi kan aendre vinkelhastigheden her. 
                else:
                    # It turns left
                    twist.angular.z = 0.5  # Vi kan aendre vinkelhastigheden her

                # Move backwards to avoid the obstacle
                twist.linear.x = -0.1  # Her kan vi aendre, hvor hurtigt robotten skal bakke
                self._cmd_pub.publish(twist)

            else:
                
                twist.linear.x = LINEAR_VEL
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of the obstacle : %f', min_distance)


def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
