#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import time
import smbus
import RPi.GPIO as GPIO
import threading
import sys

# Get I2C bus
bus = smbus.SMBus(1)

# ISL29125 address, 0x44(68)
# Select configuation-1register, 0x01(01)
# 0x0D(13) Operation: RGB, Range: 360 lux, Res: 16 Bits
bus.write_byte_data(0x44, 0x01, 0x05)
time.sleep(1)

#def getAndUpdateColour():
	#while True:
        
# Set GPIO mode to BCM so it refferences GPIO pin number instead of PI-pin number
GPIO.setmode(GPIO.BCM)

GPIO_LED = 17 

GPIO.setup(GPIO_LED,GPIO.OUT)

LINEAR_VEL = 0.19 # Den koerer ikke, hvis LINEAR_VEL > 0.21
# STOP_DISTANCE = 0.2
LIDAR_ERROR = 0.05
# SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
SOFT_DISTANCE = 0.25 + LIDAR_ERROR
MEDIUM_DISTANCE = 0.22 + LIDAR_ERROR
HARD_DISTANCE = 0.2 + LIDAR_ERROR

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()
        
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 90           # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            if scan_filter[i] < 0.01: #if an angle is not working - set it to 1 instead.
                scan_filter[i] = 1
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True
        obstacle_counter = 0
        global victim_counter
        victim_counter = 0
        collision_radius = 0.1
        soft_turns = 0
        medium_turns = 0
        hard_turns = 0


        # Function to quit the program
        def quit_program():
            twist.linear.x = 0.0
            twist.angular.z = 0.0
            self._cmd_pub.publish(twist)
            turtlebot_moving = False
            print("2 minutes passed - stopping\n")
            print("_______________________________")
            print("Obstacles hit:", obstacle_counter)
            print("Victims detected:", victim_counter)
            print("Soft turns:", soft_turns)
            print("Medium turns:", medium_turns)
            print("Hard turns:", hard_turns)
            time.sleep(2)
            print("quitting..")
            sys.exit()

        # Create a timer that will call 'quit_program' after 2 minutes (120 seconds)
        # timer = threading.Timer(10, quit_program)
        # timer.start()  # Start the timer

        runtime_start = time.time() # for the stop function after 2 minutes

        start_time_victim = 10 # For the victim counter, so it will read first victim. 

        start_time_obstacle = 10

        while not rospy.is_shutdown():

            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)
            print("min_distance:", min_distance)

            if((time.time() - runtime_start) >= 10.0):
                quit_program()

            # Soft turns
            if MEDIUM_DISTANCE < min_distance < SOFT_DISTANCE:
                soft_turns += 1
                # The robot determins whether to turn left or right
                if lidar_distances.index(min_distance) < len(lidar_distances) / 2: 
                    # It turns right
                    twist.linear.x = LINEAR_VEL
                    twist.angular.z = -0.25
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning right softly')
                else:
                    #It turns left
                    twist.linear.x = LINEAR_VEL
                    twist.angular.z = 0.25
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning left softly')

            # Medium turns
            if HARD_DISTANCE < min_distance < MEDIUM_DISTANCE:
                medium_turns += 1
                # The robot determins whether to turn left or right
                if lidar_distances.index(min_distance) < len(lidar_distances) / 2: 
                    # It turns right
                    twist.linear.x = 0.25
                    twist.angular.z = -0.5
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning right medium')
                else:
                    #It turns left
                    twist.linear.x = 0.25
                    twist.angular.z = 0.5
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning left medium')

                # Move backwards to avoid the obstacle
                # twist.linear.x = -0.1
                # self._cmd_pub.publish(twist)        

            # Hard turns
            if min_distance < HARD_DISTANCE:
                hard_turns += 1
                if turtlebot_moving:
                    # Stop the robot's movement by setting linear and angular velocities to zero
                    twist = Twist()
                    twist.linear.x = 0.0
                    twist.angular.z = 0.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = False

                # The robot determins whether to turn left or right
                if lidar_distances.index(min_distance) < len(lidar_distances) / 2: 
                    # It turns right
                    twist.linear.x = 0.3
                    twist.angular.z = -1.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning right hard')
                else:
                    #It turns left
                    twist.linear.x = 0.3
                    twist.angular.z = 1.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning left hard')

                # Move backwards to avoid the obstacle
                twist.linear.x = -0.25
                self._cmd_pub.publish(twist)

            else:
                # Move foward
                twist.linear.x = LINEAR_VEL 
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of the obstacle : %f', min_distance)
                
            if (min_distance <= collision_radius):
                if(time.time() - start_time_victim >= 10.0):
                    obstacle_counter += 1
                    start_time_obstacle = time.time()
                    print("collision detected")

            data = bus.read_i2c_block_data(0x44, 0x09, 6) #Selects the right registers
            time.sleep(0.001)
            green = data[1]*256 + data[0]# Calculates the levels of each color [0, 255]
            red = data[3]*256 + data[2]
            blue = data[5]*256 + data[4]
        
            # Determines the color based on which has the higher value
            color = ""
            green = green 
            blue = blue 
            victim_timer = 10 #victim timer set to default so it reads first victim
            # if green >= red and green >= blue: 
            #     color = "Green"
            #     GPIO.output(GPIO_LED, GPIO.LOW)

            # elif blue >= red and blue >= green:
            #     color = "Blue"
            #     GPIO.output(GPIO_LED, GPIO.LOW)

            if red >= green and green > blue:
            #red > green and red > blue and red - blue  >= 1000 and red - green >= 1000:
                color = "Red"
                #stops the robot and LED blinks when victim is detected
                # if(time.time() - start_time_victim >= 10.0):
                print("_________________")
                print("!!! Victim Detected !!!")
                twist.linear.x = 0.0
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = False 
                victim_counter = victim_counter + 1
                start_time_victim = time.time()
                #LED blinks
                GPIO.output(GPIO_LED, GPIO.HIGH)
                time.sleep(0.5)
                GPIO.output(GPIO_LED, GPIO.LOW)
                time.sleep(0.5)
                GPIO.output(GPIO_LED, GPIO.HIGH)
                time.sleep(0.5)
                GPIO.output(GPIO_LED, GPIO.LOW)
                time.sleep(0.5)
                GPIO.output(GPIO_LED, GPIO.HIGH)
                time.sleep(0.5)
                GPIO.output(GPIO_LED, GPIO.LOW)
                time.sleep(0.5)
            
            else:
                print(" ")

            print("RGB(%d %d %d)" % (red, green, blue))

            print("The color is: " + color)
        
def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
