#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import threading #til at stoppe robotten efter 2 min (ikke implementeret endnu)
import time

LINEAR_VEL = 0.19 # Den koerer ikke, hvis LINEAR_VEL > 0.21
# STOP_DISTANCE = 0.2
LIDAR_ERROR = 0.05
# SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
SOFT_DISTANCE = 0.5 + LIDAR_ERROR
MEDIUM_DISTANCE = 0.375 + LIDAR_ERROR
HARD_DISTANCE = 0.25 + LIDAR_ERROR

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()
        
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 90           # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            if scan_filter[i] < 0.01: #if an angle is not working - set it to 1 instead.
                scan_filter[i] = 1
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True

        while not rospy.is_shutdown():
            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)
            print("min_distance: %f", min_distance)

            if MEDIUM_DISTANCE < min_distance < SOFT_DISTANCE:
                if turtlebot_moving:
                    # Stop the robot's movement by setting linear and angular velocities to zero
                    twist = Twist()
                    twist.linear.x = 0.0
                    twist.angular.z = 0.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = False
                    rospy.loginfo('Robot movement halted.')

                # The robot determins whether to turn left or right
                if lidar_distances.index(min_distance) < len(lidar_distances) / 2: 
                    # It turns right
                    twist.linear.x = 0.02
                    twist.angular.z = -0.3
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning right softly %f', min_distance)
                else:
                    #It turns left
                    twist.linear.x = 0.02
                    twist.angular.z = 0.3
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning left softly %f', min_distance)

            if HARD_DISTANCE < min_distance < MEDIUM_DISTANCE:
                if turtlebot_moving:
                    # Stop the robot's movement by setting linear and angular velocities to zero
                    twist = Twist()
                    twist.linear.x = 0.0
                    twist.angular.z = 0.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = False
                    rospy.loginfo('Robot movement halted.')

                # The robot determins whether to turn left or right
                if lidar_distances.index(min_distance) < len(lidar_distances) / 2: 
                    # It turns right
                    twist.linear.x = 0.25
                    twist.angular.z = -0.3
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning right medium%f', min_distance)
                else:
                    #It turns left
                    twist.linear.x = 0.25
                    twist.angular.z = 0.3
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning left medium%f', min_distance)

                # Move backwards to avoid the obstacle
                # twist.linear.x = -0.1
                # self._cmd_pub.publish(twist)        

            if min_distance < HARD_DISTANCE:
                if turtlebot_moving:
                    # Stop the robot's movement by setting linear and angular velocities to zero
                    twist = Twist()
                    twist.linear.x = 0.0
                    twist.angular.z = 0.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = False
                    rospy.loginfo('Robot movement halted.')

                # The robot determins whether to turn left or right
                if lidar_distances.index(min_distance) < len(lidar_distances) / 2: 
                    # It turns right
                    twist.linear.x = 0.3
                    twist.angular.z = -1.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning right hard %f', min_distance)
                else:
                    #It turns left
                    twist.linear.x = 0.3
                    twist.angular.z = 1.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = True
                    rospy.loginfo('turning left hard %f', min_distance)

                # Move backwards to avoid the obstacle
                twist.linear.x = -0.25
                self._cmd_pub.publish(twist)

            else:
                # Move foward
                twist.linear.x = LINEAR_VEL 
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of the obstacle : %f', min_distance)

            # threading.Timer(120, print("Kill robot (2min timer)") + exit()).start()

def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
